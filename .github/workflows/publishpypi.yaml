name: "Build & Publish Artifacts"
on:
  push:
    branches:
      - feature

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Nebula Protocol
        uses: actions/checkout@v3

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
#          JF_ARTIFACTORY: ${{ secrets.JF_ARTIFACTORY_SECRET }}

      - name: Set CLI Config
        run: jf pip-config --global=true --repo-resolve=nebula-pypi

      - name: Package the plugins
        run: |
          make -C plugins build_all_plugins
          python -m pip install build twine setuptools setuptools_scm wheel 
          rm -rf dist/ && mkdir dist
          cp -r $(find . -print | grep -i dist/) dist/ 

      - name: Package the kit
        run: |
          python -m build

      - name: Publish kit and plugins
        run: jf rt upload dist/ nebula-pypi/

      - name: Publish Build info With JFrog CLI
        run: |
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish


  build-and-push-docker-images:
    runs-on: ubuntu-latest
    needs: deploy
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: streamlineio.jfrog.io
          username: ${{ secrets.JFROG_USER}}
          password: ${{ secrets.JFROG_PASSWORD }}
      - name: Prepare Nebulakit Image Names
        id: nebulakit-names
        uses: docker/metadata-action@v3
        with:
          images: |
            streamlineio.jfrog.io/nebula-docker/nebulakit
          tags: |
            py${{ matrix.python-version }}-latest
      - name: Build & Push Nebulakit Python${{ matrix.python-version }} Docker Image to Jfrog
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/arm64, linux/amd64
          push: true
#          push: ${{ github.event_name == 'release' }}
          tags: ${{ steps.nebulakit-names.outputs.tags }}
          build-args: |
            VERSION=${{ needs.deploy.outputs.version }}
            DOCKER_IMAGE=streamlineio.jfrog.io/nebula-docker/nebulakit:py${{ matrix.python-version }}-${{ needs.deploy.outputs.version }}
            PYTHON_VERSION=${{ matrix.python-version }}
            JFROG_USER=${{ secrets.JFROG_USER}}
            JFROG_PASSWORD=${{ secrets.JFROG_PASSWORD }}
          file: Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Prepare SQLAlchemy Image Names
        id: sqlalchemy-names
        uses: docker/metadata-action@v3
        with:
          images: |
            streamlineio.jfrog.io/nebula-docker/nebulakit
          tags: |
            py${{ matrix.python-version }}-sqlalchemy-latest
            py${{ matrix.python-version }}-sqlalchemy-${{ github.sha }}
            py${{ matrix.python-version }}-sqlalchemy-${{ needs.deploy.outputs.version }}
      - name: Push SQLAlchemy Image to GitHub Registry
        uses: docker/build-push-action@v2
        with:
          context: "./plugins/nebulakit-sqlalchemy/"
          platforms: linux/arm64, linux/amd64
          push: true
          tags: ${{ steps.sqlalchemy-names.outputs.tags }}
          build-args: |
            VERSION=${{ needs.deploy.outputs.version }}
            PYTHON_VERSION=${{ matrix.python-version }}
            JFROG_USER=${{ secrets.JFROG_USER}}
            JFROG_PASSWORD=${{ secrets.JFROG_PASSWORD }}
          file: ./plugins/nebulakit-sqlalchemy/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max


  build-and-push-nebulaagent-images:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: streamlineio.jfrog.io
          username: ${{ secrets.JFROG_USER}}
          password: ${{ secrets.JFROG_PASSWORD }}
      - name: Prepare Nebula Agent Image Names
        id: nebulaagent-names
        uses: docker/metadata-action@v3
        with:
          images: |
            streamlineio.jfrog.io/nebula-docker/nebulakit
          tags: |
            ${{ github.sha }}
      - name: Push External Plugin Service Image to GitHub Registry
        uses: docker/build-push-action@v2
        with:
          context: "."
          platforms: linux/arm64, linux/amd64
          push: true
          tags: ${{ steps.nebulaagent-names.outputs.tags }}
          build-args: |
            VERSION=${{ github.sha }}
            JFROG_USER=${{ secrets.JFROG_USER}}
            JFROG_PASSWORD=${{ secrets.JFROG_PASSWORD }}
          file: ./Dockerfile.agent
          cache-from: type=gha
          cache-to: type=gha,mode=max
